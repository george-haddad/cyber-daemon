package org.daemon.mancubus.handlers.vulnerabilities;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpResponseExpectation;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.client.WebClient;
import io.vertx.ext.web.codec.BodyCodec;

public class VulnerabilityHandler implements Handler<RoutingContext> {

        private final Logger logger = LoggerFactory.getLogger("main");
        private Vertx vertx = null;

        public VulnerabilityHandler(Vertx vx) {
                this.vertx = vx;
        }

        @Override
        public void handle(RoutingContext ctx) {
                String id = ctx.pathParam("id");

                // TODO reuse a single web client
                // WebClient client =  WebClient.wrap(httpClient);
                WebClient client = WebClient.create(vertx);

                final String host = vertx.getOrCreateContext().config().getString("vulnerabiltiy-lookup.host");
                final String apiKey = vertx.getOrCreateContext().config().getString("vulnerabiltiy-lookup.apikey");

                logger.info("Fetching vulnerability with {}: ", id);
                logger.info("Using https://{}/api/vulnerability/{}", host, id);

                client.get(443, host, "/api/vulnerability/" + id)
                                .ssl(true)
                                .as(BodyCodec.jsonObject())
                                .putHeader("Accept", "application/json")
                                .putHeader("X-API-KEY", apiKey)
                                .connectTimeout(10000)
                                .idleTimeout(5000)
                                .send()
                                .expecting(HttpResponseExpectation.SC_SUCCESS.and(HttpResponseExpectation.JSON))
                                .onSuccess(res -> {
                                        JsonObject json = res.body();
                                        JsonObject metaJson = json.getJsonObject("cveMetadata");
                                        String cveId = metaJson.getString("cveId");

                                        logger.info("Received response with status code {}", res.statusCode());
                                        logger.info("Got vulnerability: {}", cveId);

                                        ctx.response()
                                                .putHeader("content-type", "text/plain")
                                                .setStatusCode(200)
                                                .end("Successfully got vulnerability with id " + cveId);
                                })
                                .onFailure(err -> {
                                        logger.warn("Something went wrong {}", err.getMessage());
                                        ctx.response()
                                                .putHeader("content-type", "text/plain")
                                                .setStatusCode(500)
                                                .end("Failed to get vulnerability with id = " + id);
                                });
        }
}
